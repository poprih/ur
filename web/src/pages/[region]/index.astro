---
import { getRegions, getPrefectures } from "../../endpoints";
import Layout from "../../layouts/Layout.astro";
import { ArrowLeft, HomeIcon, InfoCircle } from "../../assets/icons";

export const getStaticPaths = async () => {
  const regions = await getRegions();
  return regions.map((region) => ({
    params: {
      region: region.code.toLowerCase(),
    },
    props: {
      id: region.id,
      name: region.name,
    },
  }));
};
const { region } = Astro.params;
const { id, name } = Astro.props;
const prefectures = await getPrefectures(id);
---

<Layout
  title={`${name}地方のUR賃貸住宅空き情報 | UR空き情報モニター`}
  description={`${name}地方のUR賃貸住宅の空き部屋情報をリアルタイムでLINEに通知。希望の物件が空いたらすぐにお知らせします。`}
>
  <div class="bg-primary-50 py-4">
    <div class="container mx-auto px-4">
      <nav class="flex items-center text-sm" aria-label="Breadcrumb">
        <ol class="inline-flex items-center space-x-1 md:space-x-3">
          <li class="inline-flex items-center">
            <a
              href="/"
              class="inline-flex items-center text-gray-600 hover:text-primary-600"
            >
              <HomeIcon class="w-4 h-4" />
              ホーム
            </a>
          </li>
          <li>
            <div class="flex items-center">
              <ArrowLeft class="w-4 h-4" />
              <span class="ml-1 text-gray-500 md:ml-2 font-medium"
                >{name}地方</span
              >
            </div>
          </li>
        </ol>
      </nav>
    </div>
  </div>

  <div class="container">
    <a
      href="/"
      class="inline-flex items-center text-secondary-600 hover:text-secondary-800 mb-2 transition-colors"
    >
      <ArrowLeft class="w-4 h-4" />
      全国地方一覧に戻る
    </a>

    <div class="mb-8 bg-primary-100 p-8 rounded-lg shadow-md">
      <h1 class="text-3xl font-bold text-secondary-800 mb-2">
        <span class="text-primary-600 font-bold">UR空き情報</span> - {name}地方
      </h1>
      <p class="text-gray-700 mb-2">
        このエリアの空き部屋情報を確認し、LINEで通知を受け取ることができます
      </p>
      <div class="bg-white p-4 rounded-md border border-primary-200">
        <p class="text-sm text-secondary-700 flex items-center">
          <InfoCircle class="w-4 h-4 mr-2" />
          ご希望の物件が空いた瞬間にLINEでお知らせします。物件を見逃すことなく、効率的にUR賃貸住宅を探せます。
        </p>
      </div>
    </div>

    <h2 class="text-2xl font-semibold mb-2 text-secondary-700">
      都道府県を選択してください：
    </h2>

    <form id="prefecture-form">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
        {
          prefectures.map((prefecture) => (
            <div class="bg-white rounded-lg shadow-md border border-gray-200 overflow-hidden prefecture-item">
              <a
                href={`/${region?.toLowerCase()}/${prefecture.code.toLowerCase()}`}
                id={`pref-${prefecture.code}`}
                class="block p-6 cursor-pointer h-full hover:bg-primary-50 transition-all prefecture-link"
                data-prefecture-code={prefecture.code}
              >
                <div class="font-bold text-xl text-secondary-600 mb-2">
                  {prefecture.name}
                </div>
                <div class="text-sm text-gray-600">
                  この都道府県の空き部屋を確認・通知設定する
                </div>
              </a>
            </div>
          ))
        }
      </div>

      <div class="flex justify-center">
        <button
          type="submit"
          class="bg-primary-600 text-white py-3 px-8 rounded-lg font-medium text-lg shadow-md hover:bg-primary-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          id="next-step-btn"
          disabled
        >
          次のステップへ進む
        </button>
      </div>
    </form>
  </div>
</Layout>

<script>
  // Handle prefecture selection and form submission
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("prefecture-form") as HTMLFormElement;
    const nextButton = document.getElementById(
      "next-step-btn"
    ) as HTMLButtonElement;
    const prefectureLinks = document.querySelectorAll(".prefecture-link");
    let selectedLink: HTMLAnchorElement | null = null;

    if (form && nextButton) {
      // Handle prefecture selection
      prefectureLinks.forEach((link) => {
        link.addEventListener("click", (e) => {
          e.preventDefault();

          // Remove selected class from all items
          document.querySelectorAll(".prefecture-item").forEach((item) => {
            item.classList.remove("selected");
          });

          // Add selected class to current item
          (link as HTMLElement)
            .closest(".prefecture-item")
            ?.classList.add("selected");

          // Update selected link and enable button
          selectedLink = link as HTMLAnchorElement;
          nextButton.disabled = false;
        });
      });

      // Handle form submission
      form.addEventListener("submit", (e) => {
        e.preventDefault();

        if (selectedLink && selectedLink.href) {
          window.location.href = selectedLink.href;
        }
      });
    }
  });
</script>

<style is:global>
  /* Style for selected prefecture */
  .prefecture-item.selected a {
    background-color: #fdf2f6;
  }

  .prefecture-item.selected {
    border: 2px solid #921841;
  }
</style>
