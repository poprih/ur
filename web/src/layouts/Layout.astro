---
import { translations, locales, defaultLocale } from "../config/i18n";
import type { Locale } from "../config/i18n";

interface Props {
  locale: Locale;
  title?: string;
  description?: string;
}

const { locale = defaultLocale } = Astro.props;
const t = translations[locale];
---

<!doctype html>
<html lang={locale}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{t.meta.title}</title>
    <meta name="description" content={t.meta.description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={t.meta.title} />
    <meta property="og:description" content={t.meta.description} />
    <meta property="og:image" content={`${Astro.url.origin}/ur-monitor.png`} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={t.meta.title} />
    <meta property="twitter:description" content={t.meta.description} />
    <meta
      property="twitter:image"
      content={`${Astro.url.origin}/ur-monitor.png`}
    />
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-CSHSF5KRY3"
    ></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(...args: any[]) {
        window.dataLayer.push(args);
      }
      gtag("js", new Date());

      gtag("config", "G-CSHSF5KRY3");
    </script>
  </head>
  <body class="bg-gray-50 text-gray-900">
    <div class="absolute top-4 right-4 z-50">
      <button
        id="language-menu-button"
        class="flex items-center gap-2 px-3 py-2 rounded-md text-sm font-medium bg-white shadow-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-secondary transition-colors"
        aria-expanded="false"
        aria-haspopup="true"
        aria-controls="language-menu"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="18"
          height="18"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="text-gray-600"
        >
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="2" y1="12" x2="22" y2="12"></line>
          <path
            d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"
          ></path>
        </svg>
        <span>{locales[locale]}</span>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="14"
          height="14"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="text-gray-600"
        >
          <polyline points="6 9 12 15 18 9"></polyline>
        </svg>
      </button>
      <div
        id="language-menu"
        class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg overflow-hidden z-20 hidden transition-all duration-200 ease-in-out"
        role="menu"
        aria-labelledby="language-menu-button"
      >
        <div class="py-1">
          {
            Object.entries(locales).map(([code, name]) => (
              <a
                href={`/${code !== defaultLocale ? code : ""}`}
                class={`block px-4 py-2.5 text-sm hover:bg-gray-100 transition-colors flex items-center gap-2 ${
                  code === locale
                    ? "bg-gray-100 font-medium text-secondary"
                    : "text-gray-700"
                }`}
                role="menuitem"
                aria-current={code === locale ? "page" : undefined}
              >
                {code === locale && (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="text-secondary"
                  >
                    <polyline points="20 6 9 17 4 12" />
                  </svg>
                )}
                <span class={code === locale ? "ml-0" : "ml-6"}>{name}</span>
              </a>
            ))
          }
        </div>
      </div>
    </div>

    <main>
      <slot />
    </main>
    <footer class="bg-secondary text-white py-8">
      <div class="container mx-auto px-4 text-center">
        <p>{t.sections.footer.copyright}</p>
      </div>
    </footer>

    <script>
      // JavaScript for toggling the language menu
      document.addEventListener("DOMContentLoaded", function () {
        const button = document.getElementById("language-menu-button");
        const menu = document.getElementById("language-menu");

        if (button && menu) {
          // Toggle menu on button click
          button.addEventListener("click", () => {
            const expanded = button.getAttribute("aria-expanded") === "true";
            button.setAttribute("aria-expanded", expanded ? "false" : "true");
            menu.classList.toggle("hidden");
          });

          // Close menu when clicking outside
          document.addEventListener("click", (event) => {
            const target = event.target as Node;
            if (
              button &&
              menu &&
              !button.contains(target) &&
              !menu.contains(target)
            ) {
              button.setAttribute("aria-expanded", "false");
              menu.classList.add("hidden");
            }
          });

          // Handle keyboard navigation
          document.addEventListener("keydown", (event) => {
            if (
              event.key === "Escape" &&
              button.getAttribute("aria-expanded") === "true"
            ) {
              button.setAttribute("aria-expanded", "false");
              menu.classList.add("hidden");
              button.focus();
            }
          });
        }
      });
    </script>
  </body>
</html>

<style is:global>
  html {
    font-family: system-ui, sans-serif;
    scroll-behavior: smooth;
  }

  section {
    padding: 4rem 0;
  }

  .container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }
</style>
